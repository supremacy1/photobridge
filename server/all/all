app.post('/register', (req, res) => {
  const { fullname, studio, address, phone, email, password } = req.body;

  const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
  if (!emailRegex.test(email)) {
    return res.status(400).json({ message: 'Invalid email format' });
  }
  if (!fullname || !studio || !address || !phone || !email || !password) {
    return res.status(400).send({ error: 'All fields are required' });
  }

  const CHECK_EMAIL_QUERY = `SELECT * FROM users WHERE email = ?`;
  db.query(CHECK_EMAIL_QUERY, [email], (err, results) => {
    if (err) {
      console.error('Error checking email:', err);
      return res.status(500).send({ error: 'Error registering user' });
    }

    if (results.length > 0) {
      return res.status(400).send({ error: 'Email already exists' });
    }

    // Hash the password using bcrypt
    bcrypt.hash(password, saltRounds, (err, hashedPassword) => {
      if (err) {
        console.error('Error hashing password:', err);
        return res.status(500).send({ error: 'Error registering user' });
      }

      const INSERT_USER_QUERY = `INSERT INTO users (fullname, studio, address, phone, email, password) VALUES (?, ?, ?, ?, ?, ?)`;
      db.query(INSERT_USER_QUERY, [fullname, studio, address, phone, email, hashedPassword], (err, result) => {
        if (err) {
          console.error('Error inserting user:', err);
          return res.status(500).send({ error: 'Error registering user' });
        }

        res.status(201).send({ message: 'User registered successfully' });
      });
    });
  });
});

app.post('/login', (req, res) => {
  const { email, password } = req.body;

  if (!email || !password) {
    return res.status(400).json({ message: 'Please provide email and password' });
  }

  const SELECT_USER_QUERY = 'SELECT user_id, fullname, password FROM users WHERE email = ?';
  db.query(SELECT_USER_QUERY, [email], (err, results) => {
    if (err) {
      return res.status(500).json({ message: 'Error while logging in' });
    }
    if (results.length === 0) {
      return res.status(404).json({ message: 'Invalid credentials' });
    }

    const user = results[0];
    // Compare the provided password with the hashed password stored in the database
    bcrypt.compare(password, user.password, (err, isMatch) => {
      if (err) {
        return res.status(500).json({ message: 'Error while logging in' });
      }
      if (!isMatch) {
        return res.status(404).json({ message: 'Invalid credentials' });
      }

      return res.status(200).json({ message: 'Login successful', userId: user.user_id, fullname: user.fullname });
    });
  });
});
